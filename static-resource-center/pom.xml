<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!-- Sub-module Basics -->
    <artifactId>static-resource-center</artifactId>
    <name>Muscle and Fitness Server :: Static Resource Center</name>
    <description>Static resource center for uploading and downloading.</description>
    <parent>
        <groupId>com.jmsoftware.maf</groupId>
        <artifactId>muscle-and-fitness-server</artifactId>
        <version>0.0.2-SNAPSHOT</version>
    </parent>

    <!-- Build Settings -->
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>build-info</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- https://github.com/GoogleContainerTools/jib/blob/master/jib-maven-plugin/README.md -->
            <plugin>
                <groupId>com.google.cloud.tools</groupId>
                <artifactId>jib-maven-plugin</artifactId>
                <version>${jib-maven-plugin.version}</version>
                <executions>
                    <!-- Bind `jib:dockerBuild` to a Maven lifecycle `verify`. Jib will build your image directly to a Docker daemon.
                    <execution>
                        <id>buildDockerImagePhase</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>dockerBuild</goal>
                        </goals>
                    </execution>-->
                    <!-- Bind `jib:build` to a Maven lifecycle `install`. Jib will build and push image to image registry. -->
                    <execution>
                        <id>buildAndPushDockerImagePhase</id>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <from>
                        <!-- https://hub.docker.com/r/adoptopenjdk/openjdk11/tags?page=1&ordering=last_updated&name=alpine-jre-11 -->
                        <image>adoptopenjdk/openjdk11:${adoptopenjdk11.tag}</image>
                    </from>
                    <to>
                        <image>docker.io/ijohnnymiller/${project.parent.artifactId}.${project.artifactId}</image>
                        <tags>
                            <tag>${project.version}</tag>
                        </tags>
                    </to>
                    <container>
                        <!-- The root directory on the container where the app's contents are placed. -->
                        <appRoot>/${project.artifactId}</appRoot>
                        <jvmFlags>
                            <jvmFlag>-Dfile.encoding=${project.build.sourceEncoding}</jvmFlag>
                        </jvmFlags>
                        <ports>
                            <port>${static-resource-center.port}</port>
                        </ports>
                        <creationTime>USE_CURRENT_TIMESTAMP</creationTime>
                    </container>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <!-- Scoped Dependencies Management -->
    <dependencies>
        <dependency>
            <groupId>com.jmsoftware.maf</groupId>
            <artifactId>spring-cloud-starter</artifactId>
        </dependency>

        <!-- Test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>
</project>
